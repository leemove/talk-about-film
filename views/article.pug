extends layout
block css
  link(rel="stylesheet", href="https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css")
  link(rel="stylesheet", href="/stylesheets/article.css")
block content
  .cover
  .container
    h2.text-left 你是我最满足的烦恼
    p.text-subtitle.text-left ----关于<你眼中的世界>
    p.text-center.small 文/渣斌
    .content
      //- <div class="post-body" itemprop="articleBody"><h1 id="从前端角度探讨下MVVM-MVC"><a href="#从前端角度探讨下MVVM-MVC" class="headerlink" title="从前端角度探讨下MVVM MVC"></a>从前端角度探讨下MVVM MVC</h1><p>首先声明一点,我不敢说让你花几分钟就可以完全理解这些概念.这篇文章是我个人的理解,并不一定<code>完全正确</code>!!!欢迎指正和讨论.</p><p>最近前端工程化越来越普遍完善了,面试的时候也总会被问到<code>MVC</code>,<code>MVVM</code>这类的架构名词,第一次听肯定让人很费劲,但是千万不要想得太难,其实非常非常的简单好理解,这篇文章主要会结合前端的业务场景来解释解释这些概念.</p><h2 id="什么是M-V-C"><a href="#什么是M-V-C" class="headerlink" title="什么是M , V , C"></a>什么是M , V , C</h2><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>M: Model 模型</p><p>也就是一个抽象对象的模型,作为一个小前端,你是不是也写过<code>express</code>呢?在express中一个最普通的模型可以就是这样的.很简单.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Person = {</div><div class="line">  name: <span class="built_in">String</span>,</div><div class="line">  age: <span class="built_in">Number</span></div><div class="line">}</div></pre></td></tr></tbody></table></figure><p>这就是一个人类的模型,有两个属性,一个是名字必须是<code>字符串</code>,另外一个就是年龄必须是<code>数字</code>.如果实例出一个对象的话可能就是<code>小明</code>,<code>24岁</code>这种感觉.<code>Model</code>层只关心数据最基础的增删改查.</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>V: View 视图</p><p>也就是我们所看到的.我们存在model的数据当然要展示出来了,展示在网页,展示在<code>html</code>里面.<code>view</code>就可以当成一个静态页面.<code>View</code>只关心数据的显示.</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>C: Controller 控制器</p><p>我们已经有了<code>模型Model</code>要显示在<code>View</code>上,如果像上例一样的简单数据,可以直接拿去显示,但是数据有时候不是单纯的为了显示,会有增删改的需求.这时候我们的<code>Controller控制器</code>就出现了.可以控制数据的家伙就是他.</p><h3 id="MVC-组合之后"><a href="#MVC-组合之后" class="headerlink" title="MVC 组合之后"></a>MVC 组合之后</h3><p><a href="http://image.beekka.com/blog/2015/bg2015020105.png" class="fancybox fancybox.image" rel="group"><img src="http://image.beekka.com/blog/2015/bg2015020105.png" alt="MVC"></a></p><p>图片来自<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="external">阮一峰</a>大大的博客.</p><p>所以一次完整的交互结合实际大概是这样的.</p><p><code>View</code>层网页显示了来自<code>Model</code>的数据,用户说我要改这条数据,点击了一下网页<code>View</code>,<code>Controll</code>收到来自<code>View</code>的反馈,赶紧去修改数据,也就是找<code>Model</code>.<code>Model</code>变了之后,用户再次获取数据的时候,数据已经更新过了!这就是传统的<code>MVC</code>.</p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>一眼直接看上去,你大概可以看到,少了个<code>C</code>多了个<code>V</code>和<code>M</code>.难道有两个<code>ViewModel</code>其实不是这样的.现在<code>Vue</code>和<code>Angular</code>这两款主流框架都包含了一个很nb的功能,叫做双向绑定.应运而生的类似概念就是<code>ViewModel</code>也就是<code>VM</code>.<code>VM</code>相比较<code>C</code>有一点很方便就是<code>"双向流"</code>.</p><p><a href="http://image.beekka.com/blog/2015/bg2015020110.png" class="fancybox fancybox.image" rel="group"><img src="http://image.beekka.com/blog/2015/bg2015020110.png" alt="MVVM"></a></p><p>双向的好处就是<code>ViewModel</code>不在只能操作<code>Model</code>了,可以直接去操作<code>View</code>更改视图.同时可以在获取数据之后进行加工,处理再显示到<code>View</code>上.减少了许多不必要的操作.</p><h2 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h2><p>这些概念其实并不复杂,但是还没有确定准确的标准,所以会导致很混乱.阮一峰老师的和MSDN之间就有很大的差别.所以这个东西主要还是理解怎么去用,怎么去思考,并没有一个太标准的答案,就像<code>angular</code>称自己为<code>MVW</code>,<code>W</code>:<code>Whatever</code>.你懂得怎么把将项目按照逻辑区分层次,知道每个层级该做什么,不能做什么就足够了.<del>开心就好.</del></p><p><a href="https://tuchuang001.com/image/4wEKx" target="_blank" rel="group" class="fancybox fancybox.image"><img src="https://tuchuang001.com/images/2017/09/04/mvw.md.png" alt="mvw.md.png"></a></p></div>
      :markdown-it(linkify langPrefix='highlight-')
        # MarkDown
  .footer
    .previos.float-left 上一篇
    .next.float-right 下一篇
    a(herf="/")
      i(class="fa fa-home" aria-hidden="true")
block js